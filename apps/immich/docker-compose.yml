name: immich

networks:
  proxy:
    name: proxy
    external: true
  internal:
    internal: true

volumes:
  immich-database:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_ROOT}/immich/database
  immich-model-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_ROOT}/immich/data/model-cache
  immich-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_ROOT}/immich/data/uploads
  immich-stories:
    driver: local
    driver_opts:
      type: ${STORIES_DRIVER_OPT_TYPE}
      o: ${STORIES_DRIVER_OPT_O}
      device: ${STORIES_PATH}

services:
  immich-app:
    container_name: immich-app
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    security_opt:
      - no-new-privileges:true
    networks:
      - internal
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.immich-app.entrypoints=http
      - traefik.http.routers.immich-app.rule=Host(`${SUBDOMAIN}.${DOMAIN}`)
      - traefik.http.routers.immich-app-secure.entrypoints=https
      - traefik.http.routers.immich-app-secure.rule=Host(`${SUBDOMAIN}.${DOMAIN}`)
      - traefik.http.routers.immich-app-secure.tls=true
      - traefik.http.routers.immich-app-secure.tls.certresolver=le-dns
      - traefik.http.routers.immich-app-secure.service=immich-app
      - traefik.http.routers.immich-app-secure.middlewares=https_redirect@docker,non_www@docker,sec_headers@docker,gzip_compress@docker
      - traefik.http.services.immich-app.loadbalancer.server.port=3001
    environment:
      DB_HOSTNAME: immich-database
      DB_DATABASE_NAME: immich
      DB_USERNAME: immich
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOSTNAME: immich-redis
    command: ['start.sh', 'immich']
    volumes:
      - immich-uploads:/usr/src/app/upload
      - immich-stories:/usr/src/app/stories:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      disable: false
    env_file:
      - .env
    depends_on:
      - immich-redis
      - immich-database
    restart: unless-stopped

  immich-microservices:
    container_name: immich-microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    security_opt:
      - no-new-privileges:true
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/hardware-transcoding
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    networks:
      - internal
      - proxy
    environment:
      DB_HOSTNAME: immich-database
      DB_DATABASE_NAME: immich
      DB_USERNAME: immich
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOSTNAME: immich-redis
    command: ['start.sh', 'microservices']
    volumes:
      - immich-uploads:/usr/src/app/upload
      - immich-stories:/usr/src/app/stories:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      disable: false
    env_file:
      - .env
    depends_on:
      - immich-redis
      - immich-database
    restart: unless-stopped

  immich-machine-learning:
    container_name: immich-machine-learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    security_opt:
      - no-new-privileges:true
    networks:
      - internal
      - proxy
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - immich-model-cache:/cache
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      disable: false
    env_file:
      - .env
    restart: unless-stopped

  immich-redis:
    container_name: immich-redis
    image: docker.io/redis:6.2-alpine@sha256:e3b17ba9479deec4b7d1eeec1548a253acc5374d68d3b27937fcfe4df8d18c7e
    security_opt:
      - no-new-privileges:true
    networks:
      - internal
    volumes:
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: redis-cli ping || exit 1
    restart: unless-stopped

  immich-database:
    container_name: immich-postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    security_opt:
      - no-new-privileges:true
    networks:
      - internal
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: immich
      POSTGRES_DB: immich
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - immich-database:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: ["postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    restart: unless-stopped

version: "3"

networks:
  proxy:
    name: proxy
    external: true
  internal:
    internal: true

volumes:
  funkwhale-database:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_ROOT}/funkwhale/database
  funkwhale-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_ROOT}/funkwhale/data

services:
  postgres:
    container_name: postgres
    image: postgres:12-alpine
    security_opt:
      - no-new-privileges:true
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    volumes:
      - funkwhale-database:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - internal
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    restart: unless-stopped

  redis:
    container_name: redis
    image: redis:alpine
    security_opt:
      - no-new-privileges:true
    networks: 
      - internal
    volumes:
      - ./data/redis:/data
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  celeryworker:
    image: funkwhale/funkwhale:${FUNKWHALE_VERSION:-latest}
    networks:
      - internal
    depends_on:
      - postgres
      - redis
    env_file: .env
    # Celery workers handle background tasks (such file imports or federation
    # messaging). The more processes a worker gets, the more tasks
    # can be processed in parallel. However, more processes also means
    # a bigger memory footprint.
    # By default, a worker will span a number of process equal to your number
    # of CPUs. You can adjust this, by explicitly setting the --concurrency
    # flag:
    #   celery -A funkwhale_api.taskapp worker -l INFO --concurrency=4
    command: celery -A funkwhale_api.taskapp worker -l INFO --concurrency=${CELERYD_CONCURRENCY-0}
    environment:
      - C_FORCE_ROOT=true
    volumes:
      - "${MUSIC_DIRECTORY_SERVE_PATH-/srv/funkwhale/data/music}:${MUSIC_DIRECTORY_PATH-/music}:ro"
      - "${MEDIA_ROOT}:${MEDIA_ROOT}"
    restart: unless-stopped

  celerybeat:
    image: funkwhale/funkwhale:${FUNKWHALE_VERSION:-latest}
    networks:
      - internal
    depends_on:
      - postgres
      - redis
    env_file: .env
    command: celery -A funkwhale_api.taskapp beat --pidfile= -l INFO
    restart: unless-stopped

  api:
    image: funkwhale/funkwhale:${FUNKWHALE_VERSION:-latest}
    networks:
      - internal
    depends_on:
      - postgres
      - redis
    env_file: .env
    volumes:
      - "${MUSIC_DIRECTORY_SERVE_PATH-/srv/funkwhale/data/music}:${MUSIC_DIRECTORY_PATH-/music}:ro"
      - "${MEDIA_ROOT}:${MEDIA_ROOT}"
      - "${STATIC_ROOT}:${STATIC_ROOT}"
      - "${FUNKWHALE_FRONTEND_PATH}:/frontend"
    ports:
      - "5000"
    restart: unless-stopped

  nginx:
    image: nginx
    networks:
      - internal
      - proxy
    depends_on:
      - api
    env_file:
      - .env
    environment:
      # Override those variables in your .env file if needed
      - "NGINX_MAX_BODY_SIZE=${NGINX_MAX_BODY_SIZE-100M}"
    volumes:
      - "./nginx/funkwhale.template:/etc/nginx/conf.d/funkwhale.template:ro"
      - "./nginx/funkwhale_proxy.conf:/etc/nginx/funkwhale_proxy.conf:ro"
      - "${MUSIC_DIRECTORY_SERVE_PATH-/srv/funkwhale/data/music}:${MUSIC_DIRECTORY_PATH-/music}:ro"
      - "${MEDIA_ROOT}:${MEDIA_ROOT}:ro"
      - "${STATIC_ROOT}:${STATIC_ROOT}:ro"
      - "${FUNKWHALE_FRONTEND_PATH}:/frontend:ro"
    ports:
      # override those variables in your .env file if needed
      - "${FUNKWHALE_API_IP}:${FUNKWHALE_API_PORT}:80"
    command: >
        sh -c "envsubst \"`env | awk -F = '{printf \" $$%s\", $$1}'`\"
        < /etc/nginx/conf.d/funkwhale.template
        > /etc/nginx/conf.d/default.conf
        && cat /etc/nginx/conf.d/default.conf
        && nginx -g 'daemon off;'"
    labels:
      - traefik.enable=true
      - traefik.http.routers.funkwhale-nginx.entrypoints=http
      - traefik.http.routers.funkwhale-nginx.rule=Host(`${SUBDOMAIN}.${DOMAIN}`)
      - traefik.http.routers.funkwhale-nginx-secure.entrypoints=https
      - traefik.http.routers.funkwhale-nginx-secure.rule=Host(`${SUBDOMAIN}.${DOMAIN}`)
      - traefik.http.routers.funkwhale-nginx-secure.tls=true
      - traefik.http.routers.funkwhale-nginx-secure.tls.certresolver=le-dns
      - traefik.http.routers.funkwhale-nginx-secure.service=funkwhale-nginx
      - traefik.http.routers.funkwhale-nginx-secure.middlewares=https_redirect@docker,non_www@docker,sec_headers@docker,gzip_compress@docker
      - traefik.http.services.funkwhale-nginx.loadbalancer.server.port=80
    restart: unless-stopped